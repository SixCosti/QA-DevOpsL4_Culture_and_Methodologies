github.md (Mark Down file type) cheat sheet:

https://www.markdownguide.org/cheat-sheet

Learned to fork Git repos from other users, and make pull requests.
->fork it from the website into your repo, -> clone it from yours, add, commit and push then you can create a pull request from the user's website.

Let's say I have my own place where you can write down your ideas and make programs. One day, you see a really cool code in someone else's repo, but I notice there's a mistake in it. I want to fix it, but you don't want to mess up their work functionality. So what can I do?
First, I make a copy(clone) of their program and bring it to my local directory.
In my directory, I create a new page and start fixing the mistake.
After I'm done fixing it, I would show the fixed code to the owner of the original work.
I will tell the owner about the mistake and show him/her how I've fixed it.(creating a pull request, adding a note/commentary)
If the owner likes my idea, they can accept the pull request and put it back in their own program.
That way, my work becomes a part of their program, and I can feel proud that I've helped make their program better.
Sometimes, I can also use someone else's drawing as inspiration for my own ideas. 
If the person who made the program says others can use it, you can take their program make changes to it, and create something new. (ex. MIT license)
You can even show it to others and let them know about the changes you made.

This is like a special way for people to work together on their programs and ideas. They can see what others have done, make improvements, and share their work with each other. It's like a collaborative tool that helps everyone create better ideas together.

Learned about different file types.
MD Files:
github.md (Mark Down file type) cheat sheet:
https://www.markdownguide.org/cheat-sheet
Is just a nicer way of writing documentation(ex. readme.md) on GitHub usually, you can make titles, subheadings and even code(ex. code examples in a sentence) obvious and more clear to read for the end user.

INI Files:
INI files remind me of old-fashioned ways of organizing information. They have sections and key-value pairs, which make it easy to find specific information. It's like having different labeled boxes where you can keep things. They were used in programs like PHP and Git, which are like tools that developers use to build things on the computer.
Example:
[car]
brand = Vauxhall
color = red
convertible = True

XML:
XML files are like special codes that have a lot of details. They remind me of building blocks, where you can stack different pieces together to create something big. XML is related to HTML, which is what makes websites look nice and interactive. It's like a language that computers understand to make web pages work.
Example:
<car>
  <brand>Vauxhall</brand>
  <color>red</color>
  <convertible>true</convertible>
</car>

JSON:
JSON is a simpler and more straightforward way of organizing information. It's like using a dictionary where you have words and their definitions. JSON codes use curly brackets and colons to show the relationships between different pieces of information. It's commonly used in programs written in JavaScript, which is a popular language for making websites dynamic and interactive.
It very much reminds me of dictionaries in python due to its key-value-pairs format.
Example:
{
  "car": {
    "brand": "Vauxhall",
    "color": "red",
    "convertible": true
  }
}

YAML:
YAML is like a flexible and easy-to-read storybook. It's a more modern way of organizing information. It uses spaces to keep things organized, just like we use paragraphs and spaces in a storybook. YAML is a superset of JSON, which means it can do everything JSON can do and more. It's used to store and share information in a neat and organized way.
It can be easier to code in YAML if you're using an adequate code editor as the "TAB" key can space accordigly.
Example:
car:
  brand: Vauxhall
  color: red
  convertible: true

Each file type has its own strengths and is used in different situations. They help programmers and developers store and share information effectively. It's fascinating how different types of files can help us communicate with computers and build amazing things on the internet!